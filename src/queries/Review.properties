SQL_INSERT_DOWNLOAHIST = INSERT INTO {0}.download_history(idUser,idEntity,entityType,timeStamp, hasRated,downloadUrl) VALUES(?,?,?,NOW(),{1},?)
#SQL_QUERY_RATING_STATUS=(SELECT (CASE WHEN SUM(t.hasRated)>0 THEN 1 WHEN SUM(t.hasRated)<0 THEN -1 ELSE 0 END) AS hasRated FROM {0}.download_history t WHERE t.idUser = ? AND t.idEntity = ? and entityType=?)
SQL_QUERY_RATING_STATUS = (SELECT (CASE WHEN rate.A>0 OR rate.B>0 THEN 1 WHEN rate.A<0 THEN -1 ELSE 0 END) AS hasRated FROM (SELECT(SELECT SUM(t.hasRated) FROM {0}.download_history t WHERE t.idUser = ? AND t.idEntity = ? AND t.entityType = ?) AS A, (SELECT r.idKey FROM {0}.review r WHERE r.idUser = ? AND r.idEntity = ? AND r.entityType = ?) AS B) AS rate)

SQL_QUERY_NOTRATEDCOUNT=SELECT COUNT(1) AS notRatedCount, IFNULL(SUM(IF(his.downloadTime >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND his.downloadTime < DATE_SUB(NOW(), INTERVAL 15 DAY) AND (his.alert_status=0), 1, 0)),0) AS shouldRatedCount15,IFNULL(SUM(IF(his.downloadTime <= DATE_SUB(NOW(), INTERVAL 30 DAY) AND (his.alert_status<=1), 1, 0)),0) AS shouldRatedCount30 
SQL_QUERY_NOTRATED_FROMREDBOOKS= FROM {0}.redbooks ACC INNER JOIN 
SQL_QUERY_NOTRATED_FROMHIS= (SELECT t.entityType,t.idEntity, MIN(t.idKey) AS idKey, MIN(t.timeStamp) AS downloadTime, MAX(IF(t.alertStatus IS NULL, 0, t.alertStatus)) AS alert_status, MIN(t.hasRated) AS hasRated FROM {0}.download_history t WHERE t.hasRated<=0 AND t.idUser = ? AND t.entityType=? AND  t.timeStamp >=DATE_SUB(NOW(),INTERVAL 1 YEAR) GROUP BY t.idEntity) HIS 
SQL_QUERY_NOTRATED_ONHIS= ON (ACC.FormNumber = HIS.idEntity)

SQL_UPDATE_ALERTSTATUS_30=UPDATE {0}.download_history SET alertStatus=2 WHERE timeStamp <= DATE_SUB(NOW(), INTERVAL 30 DAY) AND (alertStatus is NULL OR alertStatus<=1) AND hasRated<=0 AND idUser = ? AND entityType=?
SQL_UPDATE_ALERTSTATUS_15=UPDATE {0}.download_history SET alertStatus=1 WHERE timeStamp >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND timeStamp < DATE_SUB(NOW(), INTERVAL 15 DAY) AND (alertStatus is NULL OR alertStatus=0) AND hasRated<=0 AND idUser = ?  AND entityType=?

SQL_QUERY_RATED_RECORDS=SELECT HIS.idKey, HIS.downloadTime, HIS.idEntity AS idAcc,HIS.entityType,ACC.Title AS name, ACC.Abstract AS Abstract, ACC.TOC AS TOC,ACC.Category AS brand,IF(ACC.LastUpdate IS NULL,ACC.PubDate, ACC.LastUpdate) lastUpdate, ACC.DocType, ACC.Security,ACC.GrowthPlays,ACC.PDFURL AS dlURL, ACC.URL, ACC.PDFSize,(SELECT COUNT(1) FROM {0}.review t WHERE t.idEntity = ACC.idKey) AS reviewCount,(SELECT ROUND(AVG(t.stars)) FROM {0}.review t WHERE t.idEntity = ACC.idKey) AS avgStars 
SQL_QUERY_RATED_RECORDS_WHERE= ORDER BY HIS.hasRated DESC, HIS.idKey DESC

SQL_UPDATE_HIS_HASRATE=UPDATE {0}.download_history SET hasRated=? WHERE idUser=? AND idEntity=? and entityType=?
SQL_INSERT_REVIEW=INSERT INTO {0}.review (idEntity,entityType,category,idUser, stars, comment, timestamp) VALUES (?,?,?, ?, ?, ?, NOW())
SQL_INSERT_REVIEW_REDBOOK=INSERT INTO {0}.review (idEntity,entityType,category,idUser, stars, comment, timestamp) VALUES (?,?,?, ?, ?, ?, NOW())
SQL_INSERT_REVIEW_TECLINE=INSERT INTO {0}.review_soe (idEntity,entityType,category,idUser, stars, comment, timestamp) VALUES (?,?,?, ?, ?, ?, NOW())

SQL_QUERY_REVIEWS_COUNT=SELECT t.idEntity AS idAcc,t.entityType, COUNT(1) AS reviewCount, ROUND(AVG(t.stars)) AS avgStars FROM {0}.review t WHERE t.idEntity = ? and t.entityType=?
SQL_QUERY_REVIEWS_COUNT_REDBOOKS=SELECT t.idEntity AS idAcc,t.entityType, COUNT(1) AS reviewCount, ROUND(AVG(t.stars)) AS avgStars FROM {0}.review t WHERE t.idEntity = ? and t.entityType=?
SQL_QUERY_REVIEWS_COUNT_TECLINE=SELECT t.idEntity AS idAcc,t.entityType, COUNT(1) AS reviewCount, ROUND(AVG(t.stars)) AS avgStars FROM {0}.review_soe t WHERE t.idEntity = ? and t.entityType=?

SQL_QueryRedbookDetail=SELECT ACC.idKey as idEntity,ACC.Title AS name, ACC.Abstract AS Abstract, ACC.TOC AS TOC,ACC.Category AS brand,IF(ACC.LastUpdate IS NULL,ACC.PubDate, ACC.LastUpdate) lastUpdate, ACC.DocType, ACC.'Security',ACC.GrowthPlays,ACC.PDFURL AS dlURL, ACC.URL, ACC.PDFSize FROM {0}.redbooks ACC WHERE ACC.FormNumber = ?
SQL_QueryTechlineDetail=SELECT r.revisionId as idEntity,r.question as name,r.modifiedDate as lastUpdate,r.faqId,r.answerId,a.answerBody,ff.brandTxt as brand FROM {0}.revision r LEFT JOIN {0}.answer a ON r.answerId=a.answerId LEFT JOIN ( SELECT f.faqId, GROUP_CONCAT(br.brandText) as brandTxt  FROM {0}.faq f INNER JOIN {0}.faqBrand b ON f.faqId=b.faqId INNER JOIN {0}.brand br ON b.brandId=br.brandId group  by f.faqId) ff ON r.faqId=ff.faqId WHERE r.revisionId=? AND r.revisionStatus=3

SQL_QUERY_REVIEWS_STAT=SELECT ROUND(AVG(t.stars)) AS avgStars, COUNT(1) AS reviewCount, SUM(IF(t.stars=1, 1, 0)) AS star1Count, SUM(IF(t.stars=2, 1, 0)) AS star2Count, SUM(IF(t.stars=3, 1, 0)) AS star3Count, SUM(IF(t.stars=4, 1, 0)) AS star4Count, SUM(IF(t.stars=5, 1, 0)) AS star5Count FROM {0}.review t WHERE t.idEntity = ?  AND t.entityType=?
SQL_QUERY_REVIEWS_STAT_REDBOOKS=SELECT ROUND(AVG(t.stars)) AS avgStars, COUNT(1) AS reviewCount, SUM(IF(t.stars=1, 1, 0)) AS star1Count, SUM(IF(t.stars=2, 1, 0)) AS star2Count, SUM(IF(t.stars=3, 1, 0)) AS star3Count, SUM(IF(t.stars=4, 1, 0)) AS star4Count, SUM(IF(t.stars=5, 1, 0)) AS star5Count FROM {0}.review t WHERE t.idEntity = ?  AND t.entityType=?
SQL_QUERY_REVIEWS_STAT_TECLINE=SELECT ROUND(AVG(t.stars)) AS avgStars, COUNT(1) AS reviewCount, SUM(IF(t.stars=1, 1, 0)) AS star1Count, SUM(IF(t.stars=2, 1, 0)) AS star2Count, SUM(IF(t.stars=3, 1, 0)) AS star3Count, SUM(IF(t.stars=4, 1, 0)) AS star4Count, SUM(IF(t.stars=5, 1, 0)) AS star5Count FROM {0}.review_soe t WHERE t.idEntity = ?  AND t.entityType=?

SQL_QUERY_ENTITY_REVIEWS=SELECT t.idKey AS idReview, t.idEntity,t.entityType, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime,(SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review t WHERE t.idEntity = ? AND t.entityType=? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?
SQL_QUERY_ENTITY_REVIEWS_REDBOOKS=SELECT t.idKey AS idReview, t.idEntity,t.entityType, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime,(SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review t WHERE t.idEntity = ? AND t.entityType=? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?
SQL_QUERY_ENTITY_REVIEWS_TECLINE=SELECT t.idKey AS idReview, t.idEntity,t.entityType, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime,(SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review_soe t WHERE t.idEntity = ? AND t.entityType=? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?

SQL_QUERY_STARS_REVIEWS=SELECT t.idKey AS idReview, t.idEntity,t.entityType, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime,(SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review t WHERE t.stars=? AND t.idEntity = ? AND t.entityType=? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?
SQL_QUERY_STARS_REVIEWS_REDBOOKS=SELECT t.idKey AS idReview, t.idEntity,t.entityType, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime,(SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review t WHERE t.stars=? AND t.idEntity = ? AND t.entityType=? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?
SQL_QUERY_STARS_REVIEWS_TECLINE=SELECT t.idKey AS idReview, t.idEntity,t.entityType, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime,(SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review_soe t WHERE t.stars=? AND t.idEntity = ? AND t.entityType=? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?

SQL_QUERY_MOSTLIKED_REVIEWS=SELECT reviews.*,(SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? AND ilk.idReview = reviews.idReview LIMIT 1) AS idILiked FROM (SELECT t.idKey AS idReview, t.idEntity, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime, COUNT(lk.idReview) AS totalLike FROM {0}.review t LEFT JOIN {0}.review_like lk ON (t.idKey = lk.idReview) WHERE t.idEntity = ? AND entityType=? GROUP BY t.idKey) reviews ORDER BY reviews.totalLike DESC, reviews.idReview DESC LIMIT ?,?
SQL_QUERY_MOSTLIKED_REVIEWS_REDBOOKS=SELECT reviews.*,(SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? AND ilk.idReview = reviews.idReview LIMIT 1) AS idILiked FROM (SELECT t.idKey AS idReview, t.idEntity, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime, COUNT(lk.idReview) AS totalLike FROM {0}.review t LEFT JOIN {0}.review_like lk ON (t.idKey = lk.idReview) WHERE t.idEntity = ? AND entityType=? GROUP BY t.idKey) reviews ORDER BY reviews.totalLike DESC, reviews.idReview DESC LIMIT ?,?
SQL_QUERY_MOSTLIKED_REVIEWS_TECLINE=SELECT reviews.*,(SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? AND ilk.idReview = reviews.idReview LIMIT 1) AS idILiked FROM (SELECT t.idKey AS idReview, t.idEntity, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime, COUNT(lk.idReview) AS totalLike FROM {0}.review_soe t LEFT JOIN {0}.review_like lk ON (t.idKey = lk.idReview) WHERE t.idEntity = ? AND entityType=? GROUP BY t.idKey) reviews ORDER BY reviews.totalLike DESC, reviews.idReview DESC LIMIT ?,?

SQL_INSERT_RARINGS_LIKE=INSERT INTO {0}.review_like(idReview, idUser) VALUES(?,?)
SQL_DELETE_RATINGS_LIKE=DELETE FROM {0}.review_like WHERE idReview=? AND idUser=?
