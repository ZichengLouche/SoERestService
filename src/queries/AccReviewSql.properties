#for AccReviewDao
SQL_QueryAcceleratorDetail=SELECT ACC.Accelerator_Name AS name, ACC.Accelerator_Description AS descr, IF(AREAS.Imperative_Name IS NULL, ACC.Solution_Area, AREAS.Imperative_Name) AS AREA, IF(SOL.Name IS NULL, ACC.Industry_Solution, SOL.Name) AS solu, IND.Name AS Industry, ACC.CVM_Stage AS cvm, ACC.Type, ACC.Last_Updated, ACC.Download_URL AS dlURL, ACC.CAMSS, ACC.Cloud, ACC.Analytics, ACC.Mobile, ACC.Social, ACC.Security, ACC.Top_Asset FROM sdaccelerators.accelerators_w ACC LEFT JOIN solution_blueprint AS SOL ON (ACC.idISN=SOL.idKey) LEFT JOIN solutionareas_blueprint AS AREAS ON (ACC.idISA=AREAS.idKey) LEFT JOIN industry AS IND ON (ACC.idInd=IND.idKey) WHERE ACC.idAccelerators = ?
SQL_QueryReviewsStat=SELECT ROUND(AVG(t.stars)) AS avgStars, COUNT(1) AS reviewCount, SUM(IF(t.stars=1, 1, 0)) AS star1Count, SUM(IF(t.stars=2, 1, 0)) AS star2Count, SUM(IF(t.stars=3, 1, 0)) AS star3Count, SUM(IF(t.stars=4, 1, 0)) AS star4Count, SUM(IF(t.stars=5, 1, 0)) AS star5Count FROM {0}.review t WHERE t.entityType = 0 AND t.idEntity = ?
SQL_QueryAcceleratorReviews=SELECT t.idKey AS idRating, t.idEntity as idAccelerator, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime,(SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review t WHERE t.entityType = 0 AND t.idEntity = ? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?
SQL_QueryStarReviews=SELECT t.idKey AS idRating, t.idEntity as idAccelerator, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime, (SELECT COUNT(1) FROM {0}.review_like lk WHERE lk.idReview = t.idKey) AS totalLike, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? and ilk.idReview = t.idKey LIMIT 1) as idILiked FROM {0}.review t WHERE t.entityType = 0 AND t.stars=? AND t.idEntity = ? AND t.idKey < ? ORDER BY t.idKey DESC LIMIT ?
SQL_QueryMostLikedReviews=SELECT reviews.*, (SELECT ilk.idKey FROM {0}.review_like ilk WHERE ilk.idUser = ? AND ilk.idReview = reviews.idRating LIMIT 1) AS idILiked FROM (SELECT t.idKey AS idRating, t.idEntity as idAccelerator, t.idUser, t.stars, t.category, t.`comment`, DATE_FORMAT(t.`timestamp`, ''%M %e, %Y'') AS ratingTime, COUNT(lk.idReview) AS totalLike FROM {0}.review t LEFT JOIN {0}.review_like lk ON (t.idKey = lk.idReview) WHERE t.entityType = 0 AND t.idEntity = ? GROUP BY t.idKey) reviews ORDER BY reviews.totalLike DESC, reviews.idRating DESC LIMIT ?,?
SQL_InsertRatingsLike=INSERT INTO {0}.review_like(idReview, idUser) VALUES(?,?)
SQL_DeleteRatingsLike=DELETE FROM {0}.review_like WHERE idReview=? AND idUser=?
